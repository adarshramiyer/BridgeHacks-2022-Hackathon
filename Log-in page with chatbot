import ast
from tkinter import *
from tkinter import messagebox

root = Tk()
root.title('Login')
root.geometry('925x500+300+200')
root.configure(bg="#fff")
root.resizable(False,False)

def signin():
    username=user.get()
    password=code.get()

    file=open('/Users/tryam_mangalam/Documents/Database.txt','r')
    d=file.read()
    r=ast.literal_eval(d)
    file.close()

    print(r.keys())
    print(r.values())


    if username in r.keys() and password==r[username]:
        screen=Toplevel(root)
        screen.title("App")
        screen.geometry('925x500+300+200')
        screen.config(bg='white')

        from pyexpat import model
        import nltk
        from nltk.stem.lancaster import LancasterStemmer
        stemmer = LancasterStemmer()

        import numpy

        import tflearn
        import tensorflow
        import random
        import json
        import pickle
        import os

        #os.add_dll_directory("C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7\bin")
        nltk.download('punkt')

        verbose=1

        # Load the json file
        with open("D:\VScode\BridgeHacks-2022-Hackathon\src\chat_bot\chat_bot_train.json") as file:
            data = json.load(file)
        try:
            with open("data.pickle", "rb") as f:
                words, labels, training, output = pickle.load(f)
        except:
            # Tokenize the training data
            words = []
            labels = []
            docs_x = []
            docs_y = []

            for intent in data["intents"]:
                for pattern in intent["patterns"]:
                    wrds = nltk.word_tokenize(pattern)
                    words.extend(wrds)
                    docs_x.append(wrds)
                    docs_y.append(intent["tag"])

                    if intent["tag"] not in labels:
                        labels.append(intent["tag"])

            words = [stemmer.stem(w.lower()) for w in words if w != "?"]
            words = sorted(list(set(words)))

            labels = sorted(labels)

            training = []
            output = []

            out_empty = [0 for _ in range(len(labels))]

            #doc=nltk.word_tokenize(doc)

            for x, doc in enumerate(docs_x):
                bag = []
                wrds = [stemmer.stem(w) for w in doc]
                for w in words:
                    if w in wrds:
                        bag.append(1)
                    else:
                        bag.append(0)

                output_row = out_empty[:]
                output_row[labels.index(docs_y[x])] = 1

                training.append(bag)
                output.append(output_row)

            training = numpy.array(training) # Convert to numpy array
            output = numpy.array(output)

            with open("data.pickle", "wb") as f:
                pickle.dump((words, labels, training, output), f)

        tensorflow.compat.v1.reset_default_graph()

        net = tflearn.input_data(shape=[None, len(training[0])])
        net = tflearn.fully_connected(net, 8)
        net = tflearn.fully_connected(net, 8)
        net = tflearn.fully_connected(net, len(output[0]), activation="softmax")
        net = tflearn.regression(net)

        model = tflearn.DNN(net)

        try:
            model.load("model.tflearn")
        except:
            model = tflearn.DNN(net)
            model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
            model.save("model.tflearn")

        def bag_of_words(s, words):
            bag = [0 for _ in range((len(words)))]

            s_words = nltk.word_tokenize(s)
            s_words = [stemmer.stem(word.lower()) for word in s_words]

            for se in s_words:
                for i, w in enumerate(words):
                    if w == se:
                        bag[i] = 1
            return numpy.array(bag)

        def chat():
            os.system('cls||clear')
            print("Start talking with the bot (type quit to stop)!")
            while True:
                inp = input("You: ")
                if inp.lower() == "quit":
                    break

                results = model.predict([bag_of_words(inp, words)])[0]
                results_index = numpy.argmax(results)
                tag = labels[results_index]
                if results[results_index] > 0.5:
                    for tg in data["intents"]:
                        if tg["tag"] == tag:
                            responses = tg["responses"]
                    print(f"MesoBot: {random.choice(responses)}")
                else:
                    print("I didn't understand that, try again.")




screen.mainloop()

    else:
        messagebox.showerror('Error','Invalid username and password')

# LOGO RESIZING
from PIL import Image

image = Image.open('/Users/tryam_mangalam/Downloads/meso logo.png')
print(f"Original size : {image.size}") # 5464x3640

sunset_resized = image.resize((400, 400))
sunset_resized.save('meso.png')

img = PhotoImage(file ='meso.png')
Label(root,image=img,bg='white').place(x=50,y=50)

# END OF LOGO RESIZING


frame=Frame(root,width=350,height=350,bg="white")
frame.place(x=480,y=70)

heading=Label(frame,text='Sign In', fg='#57a1f8', bg='white', font=('Helvetica',40, 'bold'))
heading.place(x=100,y=5)

#########---------

def on_enter(e):
    user.delete(0, 'end')

def on_leave(e):
    name=user.get()
    if name=='':
        user.insert(0,'Username')


user=Entry(frame,width=30,fg='black',bg="white",font=('Helvetica',15))
user.place(x=30,y=80)
user.insert(0,'Username')
user.bind('<FocusIn>', on_enter)
user.bind('<FocusOut>', on_leave)



Frame(frame,width=295,height=2,bg='white').place(x=25,y=107)
##########---------
def on_enter(e):
    code.delete(0, 'end')

def on_leave(e):
    name=code.get()
    if name=='':
        code.insert(0,'Password')

code = Entry(frame,width=30,fg='black',bg='white',font=('Helvetica', 15))
code.place(x=30,y=150)
code.insert(0,'Password')
code.bind('<FocusIn>', on_enter)
code.bind('<FocusOut>', on_leave)


Frame(frame,width=295,height=2,bg='white').place(x=25,y=177)
##########---------

######################################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
def signup_command():
    window=Toplevel(root)
    window=Tk()
    window.title("")
    window.geometry('925x500+300+200')
    window.configure(bg='white')
    window.resizable(False, False)


    def signup():
        username=user.get()
        password=code.get()
        confirm_password=confirm_code.get()

        if password==confirm_password:
            try:
                file=open('/Users/tryam_mangalam/Documents/Database.txt','r+')
                d=file.read()
                r = ast.literal_eval(d)

                dict2={username:password}
                r.update(dict2)
                file.truncate(0)
                file.close()

                file=open('/Users/tryam_mangalam/Documents/Database.txt','w')
                w=file.write(str(r))

                messagebox.showinfo('Sign up','Sucessfully signed up!')
                window.destroy()

            except:
                file=open('/Users/tryam_mangalam/Documents/Database.txt','w')
                pp=str({'Username':'password'})
                file.write(pp)
                file.close()

        else:
            messagebox.showerror('Error', 'Both passwords should match')

    def sign():
        window.destroy()


    # LOGO RESIZING

    # END OF LOGO RESIZING

    frame=Frame(window,width=2000,height=390,bg='#fff')
    frame.place(x=0,y=50)

    heading=Label(frame,text='Sign up',fg='#57a1f8', bg='white',font=('Helvetica',40,'bold'))
    heading.place(x=400,y=5)

    ##########------------

    def on_enter(e):
        user.delete(0, 'end')

    def on_leave(e):
        name=user.get()
        if name=='':
            user.insert(0,'Username')

    user = Entry(frame,width=30,fg='black',border=2, bg = 'white',font=('Helvetica', 15))
    user.place(x=340,y=80)
    user.insert(0, 'Username')
    user.bind('<FocusIn>', on_enter)
    user.bind('<FocusOut>', on_leave)

    ##########-----------

    def on_enter(e):
        code.delete(0, 'end')

    def on_leave(e):
        name=code.get()
        if name=='':
            code.insert(0,'Password')

    code = Entry(frame,width=30,fg='black',bg='white',font=('Helvetica', 15))
    code.place(x=340,y=135)
    code.insert(0,'Password')
    code.bind('<FocusIn>', on_enter)
    code.bind('<FocusOut>', on_leave)

    ############----------

    def on_enter(e):
        confirm_code.delete(0, 'end')

    def on_leave(e):
        name=confirm_code.get()
        if name=='':
            confirm_code.insert(0,'Confirm Password')

    confirm_code = Entry(frame,width=30,fg='black',bg='white',font=('Helvetica', 15))
    confirm_code.place(x=340,y=190)
    confirm_code.insert(0,'Confirm Password')
    confirm_code.bind('<FocusIn>', on_enter)
    confirm_code.bind('<FocusOut>', on_leave)

    #############--------------


    Button(frame,width=35,pady=7,text='Sign up', bg='black',fg='black',border=0,cursor='hand2', font=('Helvetica'),command=signup).place(x=340,y=245)

    label=Label(frame,text="I have an account", fg='black',bg='white',font=("Arial",10))
    label.place(x=390,y=300)

    sign_up=Button(frame,text="Sign in", fg='#57a1f8',bg='white', cursor='hand2', command=sign)
    sign_up.place(x=490,y=297)


    ###########--------------


    window.mainloop()

######################################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Button(frame,width=35,pady=7,text='Sign in', bg='black',fg='black',border=0,command=signin, font=('Helvetica')).place(x=30,y=204)

label=Label(frame,text="Don't have an account?", fg='black',bg='white',font=("Arial",10))
label.place(x=75,y=270)

sign_up=Button(frame,text="Sign up", fg='#57a1f8',bg='white', cursor='hand2', command=signup_command)
sign_up.place(x=200,y=267)



root.mainloop()
